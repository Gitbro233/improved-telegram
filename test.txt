import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import executor
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("8065666841:AAHvmMYpx6Pv9CSmMsfOsY-ACbpZsvnVIck")  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = os.getenv("@potokovy000")  # ID –∞–¥–º–∏–Ω–∞ (–∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = InlineKeyboardMarkup(row_width=2)
btn_start = InlineKeyboardButton("üöÄ –° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å?", callback_data="start_info")
btn_kpd = InlineKeyboardButton("üìä –ö–ü–î –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ñ–∏–∫–∞", callback_data="kpd_info")
btn_ask = InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")
main_keyboard.add(btn_start, btn_kpd, btn_ask)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∞—Ä–±–∏—Ç—Ä–∞–∂—É —Ç—Ä–∞—Ñ–∏–∫–∞.", reply_markup=main_keyboard)

@dp.callback_query_handler(lambda c: c.data == 'start_info')
async def start_info(callback_query: types.CallbackQuery):
    text = "üîπ **–° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å –≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ —Ç—Ä–∞—Ñ–∏–∫–∞?**\n\n1Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∏—à—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫—Ä–∏–ø—Ç–∞, –≥–µ–º–±–ª–∏–Ω–≥)\n2Ô∏è‚É£ –ù–∞–π–¥–∏ –∫–ª–∏–µ–Ω—Ç–∞ (—á–µ—Ä–µ–∑ Tgstat, Telemetr)\n3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π –ø–µ—Ä–µ–ª–∏–≤ —Ç—Ä–∞—Ñ–∏–∫–∞\n4Ô∏è‚É£ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–π –∏ —É–ª—É—á—à–∞–π –ö–ü–î"
    await bot.send_message(callback_query.from_user.id, text)

@dp.callback_query_handler(lambda c: c.data == 'kpd_info')
async def kpd_info(callback_query: types.CallbackQuery):
    text = "üìä **–ß—Ç–æ —Ç–∞–∫–æ–µ –ö–ü–î?**\n–ö–ü–î ‚Äì —ç—Ç–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–∞—Ñ–∏–∫–∞.\n\n–ü—Ä–∏–º–µ—Ä:\n- –ü—Ä–∏–≤—ë–ª 1000 —á–µ–ª–æ–≤–µ–∫, –∑–∞—Ä–∞–±–æ—Ç–∞–ª 500$\n- –≠—Ç–∏ –ª—é–¥–∏ –ø—Ä–∏–Ω–µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç—É 1500$\n‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –ö–ü–î ‚Üí —Å—Ç–∞–≤–∫–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è!"
    await bot.send_message(callback_query.from_user.id, text)

@dp.callback_query_handler(lambda c: c.data == 'ask_question')
async def ask_question(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–¥–º–∏–Ω—É!")

@dp.message_handler()
async def forward_to_admin(message: types.Message):
    if str(message.from_user.id) != ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –∞–¥–º–∏–Ω —Å–∞–º —Å–µ–±–µ –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–ª
        await bot.send_message(ADMIN_ID, f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç @{message.from_user.username}:\n\n{message.text}")
        await message.reply("‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
